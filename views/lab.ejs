<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="Jack Renshaw">
  <meta name="generator" content="Jack Renshaw">
  <title>ELI - UNSW ELEC2133</title>
  <link rel="stylesheet" href="<%=BASE%>/bulma/css/bulma.min.css">
  <link rel="stylesheet" href="<%=BASE%>/bulma-extensions/dist/css/bulma-extensions.min.css">
  <script src="<%=BASE%>/bulma-extensions/dist/js/bulma-extensions.min.js"></script>
  <link rel="stylesheet" href="<%=BASE%>/@creativebulma/bulma-tooltip/dist/bulma-tooltip.min.css">
  <script src="<%=BASE%>/javascripts/math.js"></script>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto+Mono:wght@300;400&display=swap" rel="stylesheet">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet">
  <link href="<%=BASE%>/stylesheets/custom.css" rel="stylesheet">

  <script src="<%=BASE%>/javascripts/jquery.min.js"></script>
  <script src="<%=BASE%>/javascripts/jquery-ui.min.js"></script>
  <script type="text/javascript" src="<%=BASE%>/javascripts/ui.js" defer></script>
  <script type="text/javascript" src="<%=BASE%>/javascripts/check.js" defer></script>
  <script type="text/javascript" src="<%=BASE%>/javascripts/spice.js" defer></script>
  <!-- Bootstrap core CSS -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.6.1/font/bootstrap-icons.css">

  <meta name="theme-color" content="#000000">
  <link rel="stylesheet" href="<%=BASE%>/stylesheets/jquery-ui.min.css">
</head>

<body>
  <nav class="navbar is-dark" role="navigation" aria-label="main navigation">
    <div class="navbar-brand">
      <a class="navbar-item" href="#">
        <h1>UNSW ELI</h1>
      </a>

      <a role="button" class="navbar-burger" aria-label="menu" aria-expanded="false" data-target="navbarBasicExample">
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
        <span aria-hidden="true"></span>
      </a>
    </div>

    <div id="navbarBasicExample" class="navbar-menu">
      <div class="navbar-start">
        <a class="navbar-item <%if(!page.prev){%>disabled-icon<%}%>" data-action="changelab"
          <%if(page.prev){%>data-page='<%-JSON.stringify(page.prev)%>'<%}else{%>disabled<%}%>>
                <span class="material-icons">arrow_back</span>
        </a>
        <a class="navbar-item <%if(!page.next){%>disabled-icon<%}%>" data-action="changelab"
          <%if(page.next){%>data-page='<%-JSON.stringify(page.next)%>'<%}else{%>disabled<%}%>>
                <span class="material-icons">arrow_forward</span>
        </a>
        <a class="navbar-item" onclick="$('#Override').addClass('is-active');">
          <span class="material-icons">
            key
          </span>
        </a>
        <a class="navbar-item" onclick='$("#Instructions").addClass("is-active");'>
          <span class="material-icons">
            info
          </span>
        </a>
        <a class="navbar-item" href="#">
          <span class="material-icons">
            edit
          </span>
        </a>
        <a class="navbar-item"
          onclick="//download('save.json',generatePreload())//Check.Validate();$('#SaveLocal').addClass('is-active');"
          data-action="download" data-page='<%-JSON.stringify(page)%>'>
          <span class="material-icons">
            save
          </span>
        </a>
        <a class="navbar-item" onclick="Check.Validate();$('#SyncGlobal').addClass('is-active');">
          <span class="material-icons">
            cloud_sync
          </span>
        </a>
        <a class="navbar-item" onclick="upSync();UI.Simulate();" data-action="simulate"
          data-tooltip="Simulate Circuit and Display Results">
          <span class="material-icons">
            play_circle
          </span>
        </a>
        <a class="navbar-item" data-action="check" data-tooltip="Check Circuit for Validity">
          <span class="material-icons">
            check_circle
          </span>
        </a>
        <button class="navbar-item" data-action="implement" data-token="ELEC2133" <% if(build.analog && build.alt){
          %>style="background-color: #363636;color:#fff;border: none;" data-originallycorrect="true" data-analog="<%-
            JSON.stringify(build.analog)%>" data-alt="<%-build.alt%>"<%}else{%>data-analog="[0.0,0.0]" data-alt="0"
                disabled style="background-color: #363636;color:#aaa;border: none;"<%}%>>
                  <span class="material-icons">
                    run_circle
                  </span>
        </button>
      </div>
  </nav>
  </head>

  <body>
    <div id="Notifications"></div>
    <export>
      <%if(build.export){%>
        <%-build.export%>
          <%}%>
    </export>
    <%- include('partial/modals.ejs') %>
      <footer class="main-footer" data-html2canvas-ignore>
        <div class="container content has-text-centered">
          <div class="columns">
            <powersupply class="column is-4 text-center" id="powersupply">
              <button type="button" class="button is-dark" onclick="$('#Source').addClass('is-active');"
                data-tooltip="Configure Power Supply (This is not required in order to implement the circuit)">Power
                Supply</button>
            </powersupply>
            <signalgenerator class="column is-4  text-center" id="signalgenerator">
              <button type="button" class="button is-dark" onclick="$('#SignalGenerator').addClass('is-active');"
                data-tooltip="Configure Signal Generator (This is not required in order to implement the circuit)">Signal
                Generator</button>
            </signalgenerator>
            <oscilloscope class="column is-4  text-center" id="oscilloscope">
              <button type="button" class="button is-dark" onclick="$('#Oscilloscope').addClass('is-active');"
                data-tooltip="Configure Oscillscope (This is not required in order to implement the circuit)">Oscilloscope</button>
            </oscilloscope>
          </div>
        </div>
      </footer>
      <div id="loading"></div>
      <div id="dragover" style="display: none">
        <div style="width:100%;height:100%;position:fixed;opacity:0.5;background:#000;z-index:20"></div>
        <h2 style="color:antiquewhite;margin:0 auto;z-index:21;position:fixed;top:200px;left:25%">Drop a lab file onto
          this screen</h2>
      </div>

      <script type="text/javascript">

        function WalkThrough() {
          $("#WalkThrough").addClass("is-active");
          $("#WalkThrough table div").hide();
          $("#WalkThrough table").find("div").first().show();
        }

        $(document).ready(function () {
          WalkThrough();
          $(".navbar-start a").mouseenter(function () {
            console.log($(this).data("action"));
            if (!$(this).data("action")) return
            $("nav").css("z-index", "41");
            $("#HoverOver").addClass("is-active");
            if ($(this).data("action") == "check") {
              $("#HoverOver .modal-card-title").text("Check your Circuit");
              $("#HoverOver .modal-card-body").text("Use this button to check the validity of your circuit before implementing");
            } else if ($(this).data("action") == "simulate") {
              $("#HoverOver .modal-card-title").text("Simulate your Circuit");
              $("#HoverOver .modal-card-body").text("Use this simulate your circuit. Remember to connect your oscilloscope to get scope readings");
            } else if ($(this).data("action") == "implement") {
              $("#HoverOver .modal-card-title").text("Implement your Circuit");
              $("#HoverOver .modal-card-body").text("Use this implement your circuit on the Lab PCB. You must check your circuit first");
            }
          }).mouseleave(function () {
            $("#HoverOver").removeClass("is-active");
            $("nav").css("z-index", "30");
          })
          UI.SET();
          if ($("button[data-action='implement']").prop("disabled") == true)
            Check.Validate(
              $("wire"),
              $("port"),
              $("export component"),
              $("connectors port"),
              function(matchedResult){
                $("button[data-action='implement']").data("digital", $("meta[name='circuit']").data("alt")[matchedResult].Output.Post.Digital);
              });
          $("#loading").click(function () {
            $(this).hide();
          })
          $("a[data-action='download']").click(function () {
            download("save.json", JSON.stringify({
              meta: $("meta[name='circuit']").data(),
              voltage1: null,
              voltage2: null,
              siggen_frequency: null,
              siggen_voltage: null,
              export: $("export").html(),
            }));
          });
        })
      </script>
      <script type="text/javascript">
        let code = window.location.href.split("/").pop();
        $("a[data-action='download']").click(function () {
          download("save.json", JSON.stringify(generatePreload()).replaceAll("../images/", "../public/images/"));
        })

        $("a[data-action='check']").click(function () {
          console.log("Checking Circuit");
          upSync();
          Check.Validate(
            $("wire"),
            $("port"),
            $("export component"),
            $("connectors port"),
            function(matchedResult){
              $("button[data-action='implement']").data("digital", $("meta[name='circuit']").data("alt")[matchedResult].Output.Post.Digital);
            });
        })
        $("a[data-action='check']").dblclick(function () {
          console.log("Hard Checking Circuit");
          upSync();
          Check.Validate(
            $("wire"),
            $("port"),
            $("export component"),
            $("connectors port"),
            function(matchedResult){
              $("button[data-action='implement']").data("digital", $("meta[name='circuit']").data("alt")[matchedResult].Output.Post.Digital);
            },true);
        })

        $("a[data-action='upsync']").click(function () {
          upSync();
        });

        $("button[data-action='implement']").dblclick(function () {
          console.log($(this).data());
        })

        $("button[data-action='load-lab']").click(function () {
          console.log($(this).data('hash'));
        })

        $("button[data-action='implement']").click(function () {
          console.log($(this).data());
          let _button = this;
          let params = {
            token: $(_button).data("token"),
            output: {
              "Digital": $("meta[name='circuit']").data("alt")[$(_button).attr("data-alt")].Output.Post.Digital,
              "Analog": JSON.parse($(_button).attr("data-analog")),
            }
          }
          if ($(this).attr("data-overwrite")) {
            var overwriteData = JSON.parse($(this).attr("data-overwrite"));
            if (overwriteData.length == 2 && overwriteData[0].length == 8 && overwriteData[1].length == 8)
              for (var i = 0; i < 2; i++)
                for (var p = 0; p < 8; p++)
                  if (overwriteData[i][p] == 0 || overwriteData[i][p] == 1)
                    params.output.Digital[i][p] = overwriteData[i][p]
          }
          params.output.Analog = JSON.parse($(this).attr("data-analog"));
          console.log(params);
          $.get("http://127.0.0.1:3001/implement", params).done(function (data) {
            console.log(data);
            let receipt = "";
            for (var i of data)
              receipt += (i["type"] + " " + i["port"] + ": <b>" + i["value"] + "</b><br>")
            UI.Notification("Success", "Output Receipt", receipt);
          }).fail(function (error) {
            console.log(error)
          })
        })


        function download(filename, text) {
          var element = document.createElement('a');
          element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
          element.setAttribute('download', filename);

          element.style.display = 'none';
          document.body.appendChild(element);

          element.click();

          document.body.removeChild(element);
        }

        let matchedAlt = null;

        function generatePreload() {
          var preload = {
            voltage1: null,
            voltage2: null,
            siggen_frequency: null,
            siggen_voltage: null,
            export: $("export").html(),
            alt: $("button[data-action='implement']").prop("disabled") == true ? null : $("button[data-action='implement']").attr("data-alt"),
            analog: $("button[data-action='implement']").prop("disabled") == true ? null : JSON.parse($("button[data-action='implement']").attr("data-analog"))
          }
          return preload
        }
        $("html").on("dragover", function (event) {
          $("#dragover").show();
          event.preventDefault();
          event.stopPropagation();
          $(this).addClass('dragging');
        }).on("dragleave", function (event) {
          if (event.originalEvent.pageX != 0 || event.originalEvent.pageY != 0) {
            return false;
          }
          $("#dragover").hide();
          event.preventDefault();
          event.stopPropagation();
          $(this).removeClass('dragging');
        });


        $("html").on("drop", function (ev) {
          $("#dragover").hide();
          ev.preventDefault();
          ev.stopPropagation();
          console.log("Dropped!");
          var file = ev.originalEvent.dataTransfer.files[0];
          reader = new FileReader();
          reader.onload = function (event) {
            const savedBoard = JSON.parse(event.target.result);
            $("export").html(JSON.parse(event.target.result.replaceAll("../public/images/", "../images/")).export);
            UI.SET();
            Check.Validate(
              $("wire"),
              $("port"),
              $("export component"),
              $("connectors port"),
              function(matchedResult){
                $("button[data-action='implement']").data("digital", $("meta[name='circuit']").data("alt")[matchedResult].Output.Post.Digital);
              });
            $("#LoadFile").removeClass("is-active");
          };
          var txt = reader.readAsText(file);

        });

        function upSync() {
          console.log("Syncing up to server");
          let build = JSON.stringify(generatePreload());
          $.post("/api/" + code, { build: build }).done(function (data) {
          })
        }
        function download(filename, text) {
          var element = document.createElement('a');
          element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));
          element.setAttribute('download', filename);

          element.style.display = 'none';
          document.body.appendChild(element);

          element.click();

          document.body.removeChild(element);
        }
      </script>
  </body>

</html>